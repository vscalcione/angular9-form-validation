{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/home/home.component.ts","./src/app/components/home/home.component.html","./src/app/components/nav-bar/nav-bar.component.ts","./src/app/components/nav-bar/nav-bar.component.html","./src/app/components/reactive-form/reactive-form.component.ts","./src/app/components/reactive-form/reactive-form.component.html","./src/app/components/template-driven-form/template-driven-form.component.ts","./src/app/components/template-driven-form/template-driven-form.component.html","./src/app/directives/match-password/match-password.directive.ts","./src/app/directives/password-pattern/password-pattern.directive.ts","./src/app/directives/validate-user/validate-user.directive.ts","./src/app/models/user.ts","./src/app/services/custom-validation.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angular9-form-validation';\n}\n","<app-nav-bar></app-nav-bar>\n<div class=\"container\">\n  <router-outlet></router-outlet>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MatchPasswordDirective } from './directives/match-password/match-password.directive';\nimport { PasswordPatternDirective } from './directives/password-pattern/password-pattern.directive';\nimport { ValidateUserDirective } from './directives/validate-user/validate-user.directive';\nimport { HomeComponent } from './components/home/home.component';\nimport { NavBarComponent } from './components/nav-bar/nav-bar.component';\nimport { ReactiveFormComponent } from './components/reactive-form/reactive-form.component';\nimport { TemplateDrivenFormComponent } from './components/template-driven-form/template-driven-form.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MatchPasswordDirective,\n    PasswordPatternDirective,\n    ValidateUserDirective,\n    HomeComponent,\n    NavBarComponent,\n    ReactiveFormComponent,\n    TemplateDrivenFormComponent\n  ],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserModule,\n    RouterModule.forRoot([\n      { path: '', component: HomeComponent },\n      { path: 'reactive-form', component: ReactiveFormComponent },\n      { path: 'template-form', component: TemplateDrivenFormComponent },\n    ]),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"title-home\">\n    <h1>Welcome to Angular9 Forms Validation</h1>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.css']\n})\nexport class NavBarComponent {\n\n  collapsed = true; \n  \n  constructor() { }\n\n  toggleCollapsed(): void {\n    this.collapsed = !this.collapsed;\n  }\n\n}\n","<nav class=\"navbar navbar-expand-sm navbar-dark bg-dark fixed-top\">\n    <a class=\"navbar-brand\" [routerLink]='[\"/\"]'>Form Validation Demo</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\"\n        aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\n        (click)=\"toggleCollapsed()\">\n        <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"\n        [ngClass]=\"{'collapse': collapsed, 'navbar-collapse': true}\">\n        <ul class=\"navbar-nav mr-auto\">\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" [routerLink]='[\"/reactive-form\"]'>Reactive Form</a>\n            </li>\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" [routerLink]='[\"/template-form\"]'>Template Form</a> </li>\n        </ul>\n        <ul class=\"navbar-nav\">\n            <li class=\"nav-item active\">\n                <a class=\"nav-link\" href=\"https://github.com/vscalcione\"\n                    target=\"_blank\">GitHub</a>\n            </li>\n        </ul>\n    </div>\n</nav>","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\nimport { CustomValidationService } from '../../services/custom-validation.service';\n\n@Component({\n  selector: 'app-reactive-form',\n  templateUrl: './reactive-form.component.html',\n  styleUrls: ['./reactive-form.component.css']\n})\nexport class ReactiveFormComponent implements OnInit {\n\n  registerForm: FormGroup;\n  submitted = false;\n\n  constructor(private fb: FormBuilder, private customValidator: CustomValidationService) { }\n\n  ngOnInit(): void {\n    this.registerForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      username: ['', [Validators.required], this.customValidator.userNameValidator.bind(this.customValidator)],\n      password: ['', Validators.compose([Validators.required, this.customValidator.patternValidator()])],\n      confirmPassword: ['', [Validators.required]]\n    })\n  }\n\n  get registerFormControl () {\n    return this.registerForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.registerForm.valid) {\n      alert('Form submitted successfully!!!\\n Check tha values in your browser console');\n      console.table(this.registerForm.value);\n    }\n  }\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-8 mx-auto\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <h3>Angular Reactive Form</h3>\n                </div>\n                <div class=\"card-body\">\n                    <form class=\"form\" [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n                        <div class=\"form-group\">\n                            <label>Name</label>\n                            <input type=\"text\" class=\"form-control\" formControlName=\"name\">\n                            <span class=\"text-danger\"\n                                *ngIf=\"(registerFormControl.name.touched || submitted) && registerFormControl.name.errors?.required\">\n                                Name is required\n                            </span>\n                        </div>\n                        <div class=\"form-group\">\n                            <label>Email</label>\n                            <input type=\"text\" class=\"form-control\" formControlName=\"email\">\n                            <span class=\"text-danger\"\n                                *ngIf=\"(registerFormControl.email.touched || submitted) && registerFormControl.email.errors?.required\">\n                                Email is required\n                            </span>\n                            <span class=\"text-danger\"\n                                *ngIf=\"registerFormControl.email.touched && registerFormControl.email.errors?.email\">\n                                Enter a valid email address\n                            </span>\n                        </div>\n                        <div class=\"form-group\">\n                            <label>User Name</label>\n                            <input type=\"text\" class=\"form-control\" formControlName=\"username\">\n                            <span class=\"text-danger\"\n                                *ngIf=\"(registerFormControl.username.touched || submitted) && registerFormControl.username.errors?.required\">\n                                User Name is required\n                            </span>\n                            <span class=\"text-danger\"\n                                *ngIf=\"registerFormControl.username.touched && registerFormControl.username.errors?.userNameNotAvailable\">\n                                User Name is not available\n                            </span>\n                        </div>\n                        <div class=\"form-group\">\n                            <label>Password</label>\n                            <input type=\"password\" class=\"form-control\" formControlName=\"password\">\n                            <span class=\"text-danger\"\n                                *ngIf=\"(registerFormControl.password.touched || submitted) && registerFormControl.password.errors?.required\">\n                                Password is required\n                            </span>\n                            <span class=\"text-danger\"\n                                *ngIf=\"registerFormControl.password.touched && registerFormControl.password.errors?.invalidPassword\">\n                                Password should have minimum 8 characters, at least 1 uppercase letter, 1 lowercase\n                                letter and 1 number\n                            </span>\n                        </div>\n                        <div class=\"form-group\">\n                            <label>Confirm Password</label>\n                            <input type=\"password\" class=\"form-control\" formControlName=\"confirmPassword\">\n                            <span class=\"text-danger\"\n                                *ngIf=\"(registerFormControl.confirmPassword.touched || submitted)&& registerFormControl.confirmPassword.errors?.required\">\n                                Confirm Password is required\n                            </span>\n                            <span class=\"text-danger\"\n                                *ngIf=\"registerFormControl.confirmPassword.touched && registerFormControl.confirmPassword.errors?.passwordMismatch\">\n                                Passwords doesnot match\n                            </span>\n                        </div>\n                        <div class=\"form-group\">\n                            <button type=\"submit\" class=\"btn btn-success\">Register</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { User } from '../../models/user';\n\n@Component({\n  selector: 'app-template-driven-form',\n  templateUrl: './template-driven-form.component.html',\n  styleUrls: ['./template-driven-form.component.css']\n})\nexport class TemplateDrivenFormComponent {\n\n  userModal = new User();\n\n  constructor() { }\n\n  onSubmit() {\n    alert('Form submitted successfully!!!\\n CHeck the values on your browser console');\n    console.table(this.userModal);\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-8 mx-auto\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <h3>Angular Template-driven Form</h3>\n                </div>\n                <div class=\"card-body\">\n                    <form class=\"form\" #registerForm=\"ngForm\" [appMatchPassword]=\"['password', 'confirmPassword']\"\n                        (ngSubmit)=\"registerForm.form.valid && onSubmit()\" novalidate>\n                        <div class=\" form-group\">\n                            <label>Name</label>\n                            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"userModal.name\" name=\"name\"\n                                #name=\"ngModel\" required>\n                            <span class=\"text-danger\"\n                                *ngIf=\"(name.touched || registerForm.submitted) && name.errors?.required\">\n                                Name is required\n                            </span>\n                        </div>\n                        <div class=\"form-group\">\n                            <label>Email</label>\n                            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"userModal.email\" name=\"email\"\n                                #email=\"ngModel\" required email>\n                            <span class=\"text-danger\"\n                                *ngIf=\"(email.touched || registerForm.submitted) && email.errors?.required\">\n                                Email is required\n                            </span>\n                            <span class=\"text-danger\" *ngIf=\"email.touched && email.errors?.email\">\n                                Enter a valid email address\n                            </span>\n                        </div>\n                        <div class=\"form-group\">\n                            <label>User Name</label>\n                            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"userModal.username\" name=\"username\"\n                                #username=\"ngModel\" appValidateUserName required>\n                            <span class=\"text-danger\"\n                                *ngIf=\"(username.touched || registerForm.submitted) && username.errors?.required\">\n                                User Name is required\n                            </span>\n                            <span class=\"text-danger\" *ngIf=\"username.touched && username.errors?.userNameNotAvailable\">\n                                User Name not available\n                            </span>\n                        </div>\n                        <div class=\"form-group\">\n                            <label>Password</label>\n                            <input type=\"password\" class=\"form-control\" [(ngModel)]=\"userModal.password\" name=\"password\"\n                                #password=\"ngModel\" appPasswordPattern required>\n                            <span class=\"text-danger\"\n                                *ngIf=\"(password.touched || registerForm.submitted) && password.errors?.required\">\n                                Password is required\n                            </span>\n                            <span class=\"text-danger\" *ngIf=\"password.touched && password.errors?.invalidPassword\">\n                                Password should have minimum 8 characters, at least 1 uppercase letter, 1 lowercase\n                                letter and 1 number\n                            </span>\n                        </div>\n                        <div class=\"form-group\">\n                            <label>Confirm Password</label>\n                            <input type=\"password\" class=\"form-control\" [(ngModel)]=\"userModal.confirmPassword\"\n                                name=\"confirmPassword\" #confirmPassword=\"ngModel\" required>\n                            <span class=\"text-danger\"\n                                *ngIf=\"(confirmPassword.touched || registerForm.submitted) && confirmPassword.errors?.required\">\n                                Confirm Password is required\n                            </span>\n                            <span class=\"text-danger\"\n                                *ngIf=\"confirmPassword.touched && confirmPassword.errors?.passwordMismatch\">\n                                Passwords doesnot match\n                            </span>\n                        </div>\n                        <div class=\"form-group\">\n                            <button type=\"submit\" class=\"btn btn-success\">Register</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Directive, Input } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup } from '@angular/forms';\nimport { CustomValidationService } from '../../services/custom-validation.service';\n\n@Directive({\n  selector: '[appMatchPassword]',\n  providers: [{ \n    provide: NG_VALIDATORS,\n    useExisting: MatchPasswordDirective,\n    multi: true\n  }]\n})\nexport class MatchPasswordDirective implements Validator {\n\n  @Input('appMatchPassword') MatchPassword: string[] = [];\n\n  constructor(private customValidator: CustomValidationService) { }\n\n  validate (formGroup: FormGroup): ValidationErrors {\n    return this.customValidator.MatchPassword(this.MatchPassword[0], this.MatchPassword[1])(formGroup);\n  }\n}\n","import { Directive } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\nimport { CustomValidationService } from '../../services/custom-validation.service';\n\n@Directive({\n  selector: '[appPasswordPattern]',\n  providers: [{\n    provide: NG_VALIDATORS,\n    useExisting: PasswordPatternDirective,\n    multi: true\n  }]\n})\nexport class PasswordPatternDirective implements Validator {\n\n  constructor(private customValidator: CustomValidationService) { }\n\n  validate(control: AbstractControl) : { [key: string]: any } | null {\n    return this.customValidator.patternValidator()(control);\n  } \n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { Validator, AbstractControl, NG_ASYNC_VALIDATORS } from '@angular/forms';\nimport { CustomValidationService } from '../../services/custom-validation.service';\nimport { Observable } from 'rxjs';\n\n@Directive({\n  selector: '[appValidateUser]',\n  providers: [{\n    provide: NG_ASYNC_VALIDATORS,\n    useExisting: forwardRef(() => ValidateUserDirective),\n    multi: true\n  }]\n})\nexport class ValidateUserDirective implements Validator {\n\n  constructor(private customValidator: CustomValidationService) { }\n\n  validate(control: AbstractControl): Promise<{ [key: string]: any}> | Observable<{ [key: string]: any}> {\n    return this.customValidator.userNameValidator(control);\n  }\n\n}\n","export class User {\n  public name: string;\n  public email: string;\n  public username: string;\n  public password: string;\n  public confirmPassword: string;\n}\n","import { Injectable } from '@angular/core';\nimport { ValidatorFn, AbstractControl } from '@angular/forms';\nimport { FormGroup } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomValidationService {\n\n  patternValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (!control.value) {\n        return null;\n      }\n      const regex = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$');\n      const valid = regex.test(control.value);\n      return valid ? null : { invalidPassword: true };\n    };\n  }\n\n  MatchPassword(password: string, confirmPassword: string) {\n    return (formGroup: FormGroup) => {\n      const passwordControl = formGroup.controls[password];\n      const confirmPasswordControl = formGroup.controls[confirmPassword];\n\n      if (!passwordControl || !confirmPasswordControl) {\n        return null;\n      }\n\n      if (confirmPasswordControl.errors && !confirmPasswordControl.errors.passwordMismatch) {\n        return null;\n      }\n\n      if (passwordControl.value !== confirmPasswordControl.value) {\n        confirmPasswordControl.setErrors({ passwordMismatch: true });\n      } else {\n        confirmPasswordControl.setErrors(null);\n      }\n    }\n  }\n\n  userNameValidator(userControl: AbstractControl) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        if (this.validateUserName(userControl.value)) {\n          resolve({ userNameNotAvailable: true });\n        } else {\n          resolve(null);\n        }\n      }, 1000);\n    });\n  }\n\n  validateUserName(userName: string) {\n    const UserList = ['ankit', 'admin', 'user', 'superuser'];\n    return (UserList.indexOf(userName) > -1);\n  }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}